# configuration for https://github.com/orhun/git-cliff

[changelog]
# changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
# note that the - before / after the % controls whether whitespace is rendered between each line.
# Getting this right so that the markdown renders with the correct number of lines between headings
# code fences and list items is pretty finicky. Note also that the 4 backticks in the commit macro
# is intentional as this escapes any backticks in the commit body.
body = """

{% if not version %}
## [Unreleased]
{% else %}
## [{{ version }}](https://git.meliemail.org/meli/meli/releases/tag/{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
{% endif %}
{% macro commit(commit) -%}
- [{{ commit.id | truncate(length=8, end="") }}]({{ "https://git.meliemail.org/meli/meli/commit/" ~ commit.id }}) {% if commit.scope %}*({{commit.scope | lower }})* {% endif %}{{ commit.message | split(pat="\n")| first | upper_first }}{% endmacro -%}
{% for group, commits in commits | group_by(attribute="group") %}

### {{ group | striptags | trim | upper_first }}
{% for commit in commits | filter(attribute="scope") | sort(attribute="scope") %}
{{ self::commit(commit=commit) }}
{%- endfor -%}
{% for commit in commits %}
{%- if not commit.scope %}
{{ self::commit(commit=commit) }}
{%- endif -%}
{%- endfor -%}
{%- endfor %}
"""

# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """


<!-- generated by git-cliff <https://git-cliff.org> -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://git.meliemail.org/meli/meli/issues/${2}))" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 00 -->Added" },
  { message = "^[aA]dd", group = "<!-- 00 -->Added" },
  { message = "[fF]ix", group = "<!-- 01 -->Bug Fixes" },
  { message = "[rR]efactor", group = "<!-- 02 -->Refactoring" },
  { message = "[mM]ove", group = "<!-- 02 -->Refactoring" },
  { message = "[rR]emove", group = "<!-- 02 -->Refactoring" },
  { message = "^refactor", group = "<!-- 02 -->Refactoring" },
  { message = "^[^.]*.rs:", group = "<!-- 02 -->Refactoring" },
  { message = "^meli", group = "<!-- 07 -->Miscellaneous Tasks" },
  { message = "^melib", group = "<!-- 07 -->Miscellaneous Tasks" },
  { message = "^imap", group = "<!-- 07 -->Miscellaneous Tasks" },
  { message = "^jmap", group = "<!-- 07 -->Miscellaneous Tasks" },
  { message = "^notmuch", group = "<!-- 07 -->Miscellaneous Tasks" },
  { message = "^mbox", group = "<!-- 07 -->Miscellaneous Tasks" },
  { message = "^smtp", group = "<!-- 07 -->Miscellaneous Tasks" },
  { message = "^mbox", group = "<!-- 07 -->Miscellaneous Tasks" },
  { message = "^doc", group = "<!-- 03 -->Documentation" },
  { message = "[mM]anual", group = "<!-- 03 -->Documentation" },
  { message = "[mM]anpage", group = "<!-- 03 -->Documentation" },
  { message = "[rR]eadme", group = "<!-- 03 -->Documentation" },
  { message = "^perf", group = "<!-- 04 -->Performance" },
  { message = "^style", group = "<!-- 05 -->Styling" },
  { message = "^test", group = "<!-- 06 -->Testing" },
  { message = "^debian", group = "<!-- 06 -->Packaging" },
  { message = "^mail/view", group = "<!-- 02 -->Changes" },
  { message = "^view", group = "<!-- 02 -->Changes" },
  { message = "^utilities", group = "<!-- 02 -->Changes" },
  { message = "^mail", group = "<!-- 02 -->Changes" },
  { message = "^listing", group = "<!-- 02 -->Changes" },
  { message = "^terminal", group = "<!-- 02 -->Changes" },
  { message = "^types", group = "<!-- 02 -->Changes" },
  { message = "^conf", group = "<!-- 02 -->Changes" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore\\(deps\\)", skip = true },
  { message = "^chore\\(changelog\\)", skip = true },
  { message = "^[cC]hore", group = "<!-- 07 -->Miscellaneous Tasks" },
  { message = "^scripts", group = "<!-- 07 -->Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 08 -->Security" },
  { message = "^build", group = "<!-- 09 -->Build" },
  { message = "^ci", group = "<!-- 10 -->Continuous Integration" },
  { message = "^revert", group = "<!-- 11 -->Reverted Commits" },
  { message = ".*", group = "<!-- 07 -->Miscellaneous Tasks" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "v[0-9]+|alpha-[0-9]+"
# regex for ignoring tags
ignore_tags = "v[^-]+-rc[.]?[0-9]+"
# regex for skipping tags
#skip_tags = "alpha"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
